Index: src/Main.java
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.BaseRevisionTextPatchEP
<+>import java.util.Scanner;\n\npublic class Main {\n    private static TUI tui = new TUI();\n    private static Joc joc = new Joc();\n    private static Scanner sc = new Scanner(System.in);\n\n    public static void main(String[] args) {\n        boolean sortir = false;\n        while (!sortir) {\n            int opcio = tui.mostrarMenu();\n            switch (opcio) {\n                case 1:\n                    novaPartida();\n                    break;\n                case 2:\n                    carregarPartida();\n                    break;\n                case 3:\n                    configuracio();\n                    break;\n                case 4:\n                    sortir = true;\n                    break;\n                default:\n                    System.out.println(\"Opció invàlida.\");\n            }\n        }\n    }\n\n    private static void novaPartida() {\n        joc.novaPartida();\n        boolean partidaAcabada = false;\n        while (!partidaAcabada) {\n            tui.mostrarTaulell(joc.getTaulell(), joc.getTorn());\n            short[] jugada = tui.recollirJugada();\n            joc.jugar(jugada[0], String.valueOf(jugada[1]));\n            if (joc.jugadaGuanyadora(jugada[0], jugada[1])) {\n                tui.mostrarTaulell(joc.getTaulell(), joc.getTorn());\n                short guanyador = (joc.getTorn() % 2 == 0) ? (short) 1 : (short) 0;\n                tui.fiDePartida(guanyador);\n                partidaAcabada = true;\n            } else if (joc.getTorn() == 9) {\n                tui.mostrarTaulell(joc.getTaulell(), joc.getTorn());\n                tui.fiDePartida((short) -1);\n                partidaAcabada = true;\n            }\n        }\n    }\n\n    private static void carregarPartida() {\n        // Implementar la lógica para cargar una partida guardada\n    }\n\n    private static void configuracio() {\n        // Implementar la lógica para mostrar el menú de configuración\n    }\n}\n
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
diff --git a/src/Main.java b/src/Main.java
--- a/src/Main.java	(revision 3f5d3bac9436900f7cbf5de3cc6cfe376984854f)
+++ b/src/Main.java	(date 1714671307155)
@@ -29,30 +29,14 @@
     }
 
     private static void novaPartida() {
-        joc.novaPartida();
-        boolean partidaAcabada = false;
-        while (!partidaAcabada) {
-            tui.mostrarTaulell(joc.getTaulell(), joc.getTorn());
-            short[] jugada = tui.recollirJugada();
-            joc.jugar(jugada[0], String.valueOf(jugada[1]));
-            if (joc.jugadaGuanyadora(jugada[0], jugada[1])) {
-                tui.mostrarTaulell(joc.getTaulell(), joc.getTorn());
-                short guanyador = (joc.getTorn() % 2 == 0) ? (short) 1 : (short) 0;
-                tui.fiDePartida(guanyador);
-                partidaAcabada = true;
-            } else if (joc.getTorn() == 9) {
-                tui.mostrarTaulell(joc.getTaulell(), joc.getTorn());
-                tui.fiDePartida((short) -1);
-                partidaAcabada = true;
-            }
-        }
+
     }
 
     private static void carregarPartida() {
-        // Implementar la lógica para cargar una partida guardada
+
     }
 
     private static void configuracio() {
-        // Implementar la lógica para mostrar el menú de configuración
+
     }
 }
Index: src/JocTest.java
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.BaseRevisionTextPatchEP
<+>import static org.junit.jupiter.api.Assertions.*;\n\nclass JocTest {\n\n    private Joc joc;\n\n    @org.junit.jupiter.api.BeforeEach\n    void setUp() {\n        joc = new Joc();\n    }\n\n    @org.junit.jupiter.api.Test\n    void jugar() {\n        // Caso de prueba 1: Jugada válida en una celda vacía\n        joc.jugar((short) 0, \"0\");\n        char[][] expectedTaulell1 = {\n                {'X', '-', '-'},\n                {'-', '-', '-'},\n                {'-', '-', '-'}\n        };\n        assertArrayEquals(expectedTaulell1, joc.getTaulell());\n        assertEquals(1, joc.getTorn());\n\n        // Caso de prueba 2: Jugada inválida en una celda ocupada\n        joc.jugar((short) 0, \"0\");\n        char[][] expectedTaulell2 = {\n                {'X', '-', '-'},\n                {'-', '-', '-'},\n                {'-', '-', '-'}\n        };\n        assertArrayEquals(expectedTaulell2, joc.getTaulell());\n        assertEquals(1, joc.getTorn());\n\n        // Caso de prueba 3: Jugada válida en otra celda vacía\n        joc.jugar((short) 1, \"1\");\n        char[][] expectedTaulell3 = {\n                {'X', '-', '-'},\n                {'-', 'O', '-'},\n                {'-', '-', '-'}\n        };\n        assertArrayEquals(expectedTaulell3, joc.getTaulell());\n        assertEquals(2, joc.getTorn());\n    }\n}\n
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
diff --git a/src/JocTest.java b/src/JocTest.java
--- a/src/JocTest.java	(revision 3f5d3bac9436900f7cbf5de3cc6cfe376984854f)
+++ b/src/JocTest.java	(date 1714671384620)
@@ -1,44 +1,0 @@
-import static org.junit.jupiter.api.Assertions.*;
-
-class JocTest {
-
-    private Joc joc;
-
-    @org.junit.jupiter.api.BeforeEach
-    void setUp() {
-        joc = new Joc();
-    }
-
-    @org.junit.jupiter.api.Test
-    void jugar() {
-        // Caso de prueba 1: Jugada válida en una celda vacía
-        joc.jugar((short) 0, "0");
-        char[][] expectedTaulell1 = {
-                {'X', '-', '-'},
-                {'-', '-', '-'},
-                {'-', '-', '-'}
-        };
-        assertArrayEquals(expectedTaulell1, joc.getTaulell());
-        assertEquals(1, joc.getTorn());
-
-        // Caso de prueba 2: Jugada inválida en una celda ocupada
-        joc.jugar((short) 0, "0");
-        char[][] expectedTaulell2 = {
-                {'X', '-', '-'},
-                {'-', '-', '-'},
-                {'-', '-', '-'}
-        };
-        assertArrayEquals(expectedTaulell2, joc.getTaulell());
-        assertEquals(1, joc.getTorn());
-
-        // Caso de prueba 3: Jugada válida en otra celda vacía
-        joc.jugar((short) 1, "1");
-        char[][] expectedTaulell3 = {
-                {'X', '-', '-'},
-                {'-', 'O', '-'},
-                {'-', '-', '-'}
-        };
-        assertArrayEquals(expectedTaulell3, joc.getTaulell());
-        assertEquals(2, joc.getTorn());
-    }
-}
Index: src/TUI.java
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.BaseRevisionTextPatchEP
<+>import java.util.Scanner;\n\npublic class TUI {\n    private Scanner sc;\n\n    public TUI() {\n        sc = new Scanner(System.in);\n    }\n\n    public int mostrarMenu() {\n        System.out.println(\"1. Nova partida\");\n        System.out.println(\"2. Carregar partida\");\n        System.out.println(\"3. Configuració\");\n        System.out.println(\"4. Sortir\");\n        return sc.nextInt();\n    }\n\n    public void mostrarTaulell(char[][] taulell, short torn) {\n        String jugador = (torn % 2 == 0) ? \"X\" : \"O\";\n        System.out.println(\"Torn del jugador \" + jugador);\n        for (int i = 0; i < 3; i++) {\n            for (int j = 0; j < 3; j++) {\n                System.out.print(taulell[i][j] + \" \");\n            }\n            System.out.println();\n        }\n    }\n\n    public short[] recollirJugada() {\n        short fila, columna;\n        System.out.print(\"Introduce la fila (0-2): \");\n        fila = sc.nextShort();\n        System.out.print(\"Introduce la columna (0-2): \");\n        columna = sc.nextShort();\n        return new short[]{fila, columna};\n    }\n\n    public void fiDePartida(short guanyador) {\n        if (guanyador == -1) {\n            System.out.println(\"Empat!\");\n        } else {\n            String jugador = (guanyador % 2 == 0) ? \"X\" : \"O\";\n            System.out.println(\"Guanya el jugador \" + jugador);\n        }\n    }\n}\n
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
diff --git a/src/TUI.java b/src/TUI.java
--- a/src/TUI.java	(revision 3f5d3bac9436900f7cbf5de3cc6cfe376984854f)
+++ b/src/TUI.java	(date 1714671307167)
@@ -3,9 +3,6 @@
 public class TUI {
     private Scanner sc;
 
-    public TUI() {
-        sc = new Scanner(System.in);
-    }
 
     public int mostrarMenu() {
         System.out.println("1. Nova partida");
@@ -16,31 +13,14 @@
     }
 
     public void mostrarTaulell(char[][] taulell, short torn) {
-        String jugador = (torn % 2 == 0) ? "X" : "O";
-        System.out.println("Torn del jugador " + jugador);
-        for (int i = 0; i < 3; i++) {
-            for (int j = 0; j < 3; j++) {
-                System.out.print(taulell[i][j] + " ");
-            }
-            System.out.println();
-        }
+
+    }
+
+    public int recollirJugada() {
+        return 0;
     }
 
-    public short[] recollirJugada() {
-        short fila, columna;
-        System.out.print("Introduce la fila (0-2): ");
-        fila = sc.nextShort();
-        System.out.print("Introduce la columna (0-2): ");
-        columna = sc.nextShort();
-        return new short[]{fila, columna};
-    }
+    public void fiDePartida(int guanyador) {
 
-    public void fiDePartida(short guanyador) {
-        if (guanyador == -1) {
-            System.out.println("Empat!");
-        } else {
-            String jugador = (guanyador % 2 == 0) ? "X" : "O";
-            System.out.println("Guanya el jugador " + jugador);
-        }
     }
 }
Index: src/Joc.java
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.BaseRevisionTextPatchEP
<+>public class Joc {\n    private char[][] taulell;\n    private short torn;\n\n    public Joc() {\n        taulell = new char[3][3];\n        novaPartida();\n    }\n\n    public char[][] getTaulell() {\n        return taulell;\n    }\n\n    public short getTorn() {\n        return torn;\n    }\n\n    public void novaPartida() {\n        for (int i = 0; i < 3; i++) {\n            for (int j = 0; j < 3; j++) {\n                taulell[i][j] = '-';\n            }\n        }\n        torn = 0;\n    }\n\n    public void jugar(short fila, String columna) {\n        //throw new ExecutionControl.NotImplementedException();\n        short col = Short.parseShort(columna);\n        if (taulell[fila][col] == '-') {\n            taulell[fila][col] = (torn % 2 == 0) ? 'X' : 'O';\n            torn++;\n        }\n    }\n\n    public boolean jugadaGuanyadora(short fila, short columna) {\n        char simbol = taulell[fila][columna];\n\n        // Comprova fila\n        if (taulell[fila][0] == simbol && taulell[fila][1] == simbol && taulell[fila][2] == simbol) {\n            return true;\n        }\n\n        // Comprova columna\n        if (taulell[0][columna] == simbol && taulell[1][columna] == simbol && taulell[2][columna] == simbol) {\n            return true;\n        }\n\n        // Comprova diagonal\n        if (fila == columna && taulell[0][0] == simbol && taulell[1][1] == simbol && taulell[2][2] == simbol) {\n            return true;\n        }\n\n        if (fila + columna == 2 && taulell[0][2] == simbol && taulell[1][1] == simbol && taulell[2][0] == simbol) {\n            return true;\n        }\n\n        return false;\n    }\n}\n
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
diff --git a/src/Joc.java b/src/Joc.java
--- a/src/Joc.java	(revision 3f5d3bac9436900f7cbf5de3cc6cfe376984854f)
+++ b/src/Joc.java	(date 1714671384616)
@@ -16,45 +16,15 @@
     }
 
     public void novaPartida() {
-        for (int i = 0; i < 3; i++) {
-            for (int j = 0; j < 3; j++) {
-                taulell[i][j] = '-';
-            }
-        }
-        torn = 0;
+
     }
 
     public void jugar(short fila, String columna) {
-        //throw new ExecutionControl.NotImplementedException();
-        short col = Short.parseShort(columna);
-        if (taulell[fila][col] == '-') {
-            taulell[fila][col] = (torn % 2 == 0) ? 'X' : 'O';
-            torn++;
-        }
+
+
     }
 
     public boolean jugadaGuanyadora(short fila, short columna) {
-        char simbol = taulell[fila][columna];
-
-        // Comprova fila
-        if (taulell[fila][0] == simbol && taulell[fila][1] == simbol && taulell[fila][2] == simbol) {
-            return true;
-        }
-
-        // Comprova columna
-        if (taulell[0][columna] == simbol && taulell[1][columna] == simbol && taulell[2][columna] == simbol) {
-            return true;
-        }
-
-        // Comprova diagonal
-        if (fila == columna && taulell[0][0] == simbol && taulell[1][1] == simbol && taulell[2][2] == simbol) {
-            return true;
-        }
-
-        if (fila + columna == 2 && taulell[0][2] == simbol && taulell[1][1] == simbol && taulell[2][0] == simbol) {
-            return true;
-        }
-
-        return false;
+                return false;
     }
 }
